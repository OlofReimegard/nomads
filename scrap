creat table of friend requests
     id key bla bla
     requester id
     recipitent id
     status (1 = accepted, 2 = pending, 3 = rejected 4 = cancelled, 5 = terminated)

     select * from friend requests where (recipentid = $1 OR requester id = $2) AND (recipentid = $2 OR requester id = $1)

     add this query to the other query from other profile.

     <div id="profile-info">
         <h2>{this.props.first} {this.props.last}</h2>
         {this.state.hasBio && <p>{this.state.bio}</p>}
         {!this.state.bio && <p>{this.props.bio}</p>}
         {!this.state.hasBio && !this.state.bioInput && !this.props.bio && <p onClick={this.props.updateBio}>Insert bio</p>}
         {!this.state.hasBio && this.state.bioInput && <textarea onChange={e => this.updateBio(e)} rows="4" cols="50">insertBio</textarea>}
         {!this.state.hasBio && this.state.bioInput && <div onClick={e => this.insertBio(e)} className="bio-button"><p>Submit</p></div>}
         {this.props.bio && !this.state.bioInput && <div onClick={e => this.readyUpdate(e)} className="bio-button"><p>Update bio</p></div>}
     </div>



     Express routes:

- GET /friend-requests: list of all friend requests with status = accepted or (status = pending AND recipient = req.session.user.id)
- POST /friend-request/accept
- POST /friend-request/terminate

Actions / Action Creators - all three make ajax requests to above routes and then resolve with action object

- RECEIVE_FRIEND_REQUESTS
- ACCEPT_FRIEND_REQUEST
- END_FRIENDSHIP

Reducer

- if action is RECIEVE_FRIEND_REQUESTS, replace state with object with a friendRequestProperty containing array of friendRequest
- if action is ACCEPT_FRIEND_REQUEST, replace friend requests array with a new array in which user whose friend request has been accepted in replaced with a new object with updated status
- if action is END_FRIENDSHIP, replace friend requests array with a new array in which user whose friend request has been accepted in replaced with a new object with updated status

Start - initialize redux

- importing createStore, applyMiddleware, redux-promise, Provider
- calling createStore, passing to it the reducer function and result of call to applyMiddleware passing reduxPromise
- wrap router in provider, passing store as prop
- add route for /friends with component Friends

Friends js

- Create a presentational component that gets passed props:
  - friends
  - requests
  - dispatch
- Presentational component dispatches RECEIVE_FRIEND_REQUESTS when it mounts
- Presentational component passes functions that dispatch END_FRIENDSHIP and ACCEPT_FRIEND_REQUEST actions as onClick handlers in render
- Presentational component renders friends in one section and requests in another
- Container component builds separate lists based on status to pass as props (friends and requests)
- Export the container component created by call to connect and use it in route







io.sockets.emit("new player has joined")

io.sockets.sockets[id].emit


make onlineusers []


app.get("/urlwith/:socket.id") {

onlineusers.push ->
req.params.socketid
req.session.user.id
}


socket to redux:
make let socket;

then when component mounts

socket = io.connect

so socket only connects once!
